---
####################################################################
#
# The use of LDAP AND local system accounts creates duplicate users
# and groups. This can get confusing.
#
# Not pretty, but here's how to make it all work ..................
#
####################################################################

# Create local systems accounts if they do not exist.
- name: Register if '{{ activiti_group }}' local group exists
  ansible.builtin.command: /usr/bin/grep '{{ activiti_group }}' /etc/group
  register: local_activiti_group_exists
  failed_when: false
  changed_when: false

- name: Register if '{{ activiti_user }}' local user exists
  ansible.builtin.command: /usr/bin/grep '{{ activiti_user }}' /etc/passwd
  register: local_activiti_user_exists
  failed_when: false
  changed_when: false

- name: Ensure group '{{ activiti_group }}' exists
  ansible.builtin.command: /usr/sbin/lgroupadd -g '{{ activiti_gid }}' '{{ activiti_group }}'
  when: local_activiti_group_exists is failed

- name: Ensure user '{{ activiti_user }}' exists
  ansible.builtin.command: "/usr/sbin/luseradd -d '{{ activiti_home }}' -s '{{ activiti_shell }}'\
   -u '{{ activiti_uid }}' -g '{{ activiti_gid }}' '{{ activiti_user }}'"
  when: local_activiti_user_exists is failed

- name: Verify correct RPMs are uninstalled
  ansible.builtin.yum:
    name: '{{ item }}'
    state: absent
  loop: '{{ activiti_remove_rpm_packages }}'

- name: Verify correct RPMs are installed
  ansible.builtin.yum:
    name: '{{ item }}'
    state: present
  loop: '{{ activiti_install_rpm_packages }}'

- name: Correct java version selected
  community.general.alternatives:
    name: java
    link: '{{ alternatives_java_link }}'
    path: '{{ alternatives_java_path }}'
  failed_when: false
  changed_when: false

- name: Push and enable activiti.service unit
  ansible.builtin.template:
    src: etc/systemd/system/activiti.service.j2
    dest: /etc/systemd/system/activiti.service
    owner: root
    group: root
    mode: '0644'
  notify: enable_activiti

- name: Create/Ensure activiti home dir
  ansible.builtin.file:
    path: '{{ activiti_home }}'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '0770'
    state: directory

- name: Create/Ensure tomcat home dir
  ansible.builtin.file:
    path: '{{ tomcat_home }}'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '0550'
    state: directory

- name: Register tomcat installed
  ansible.builtin.command: grep '{{ tomcat_version }}' '{{ tomcat_home }}/RELEASE-NOTES'
  register: tomcat_installed
  failed_when: false
  changed_when: false

- name: Unarchive tomcat to /usr/local/activiti
  ansible.builtin.unarchive:
    src: '{{ tomcat_archive }}'
    dest: '{{ activiti_home }}'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    remote_src: true
  when: tomcat_installed is failed

- name: Create/Ensure tomcat bin dir
  ansible.builtin.file:
    path: '{{ tomcat_home }}/bin'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '0550'
    state: directory
    recurse: true

- name: Create/Ensure tomcat conf dir
  ansible.builtin.file:
    path: '{{ tomcat_home }}/conf'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '2570'
    state: directory

- name: Install postgresql jar
  ansible.builtin.get_url:
    url: '{{ postgresql_jar }}'
    dest: '{{ tomcat_home }}/lib'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '0755'

- name: Install postgis-jdbc jar
  ansible.builtin.get_url:
    url: '{{ postgis_jar }}'
    dest: '{{ tomcat_home }}/lib'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '0755'

- name: Create/Ensure tomcat lib dir
  ansible.builtin.file:
    path: '{{ tomcat_home }}/lib'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '2570'
    state: directory
    recurse: true

- name: Create/Ensure tomcat temp dir
  ansible.builtin.file:
    path: '{{ tomcat_home }}/temp'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '2770'
    state: directory
    recurse: true

- name: Create/Ensure tomcat webapps dir
  ansible.builtin.file:
    path: '{{ tomcat_home }}/webapps'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '2770'
    state: directory
    recurse: true

- name: Create/Ensure tomcat work dir
  ansible.builtin.file:
    path: '{{ tomcat_home }}/work'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '2770'
    state: directory
    recurse: true

- name: Create/Ensure tomcat Catalina dir
  ansible.builtin.file:
    path: '{{ tomcat_home }}/conf/Catalina'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '0570'
    state: directory

- name: Create/Ensure tomcat localhost dir
  ansible.builtin.file:
    path: '{{ tomcat_home }}/conf/Catalina/localhost'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '2570'
    state: directory

- name: Register log symlink
  ansible.builtin.command: readlink '{{ tomcat_logs }}'
  register: log_symlink
  failed_when: false
  changed_when: false

- name: Remove tomcat logs dir in order to symlink
  ansible.builtin.file:
    path: '{{ tomcat_logs }}'
    state: absent
  when: log_symlink is failed
  failed_when: false
  changed_when: false

- name: Create/Ensure tomcat logs dir
  ansible.builtin.file:
    path: '{{ activiti_logs }}'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '2370'
    state: directory
    recurse: true

- name: Symlink activiti logs to tomcat
  ansible.builtin.file:
    src: '{{ activiti_logs }}'
    dest: '{{ tomcat_logs }}'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    state: link

- name: Create/Ensure '{{ activiti_pki }}' dir
  ansible.builtin.file:
    path: '{{ activiti_pki }}'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '0700'
    state: directory

- name: Push Activiti certificateKeyFile
  ansible.builtin.copy:
    src: '{{ activiti_certificateKeyFile_location }}'
    dest: '{{ activiti_certificateKeyFile }}'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '0600'

- name: Push Activiti certificateFile
  ansible.builtin.copy:
    src: '{{ activiti_certificateFile_location }}'
    dest: '{{ activiti_certificateFile }}'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '0600'

- name: Push Activiti chain.pem
  ansible.builtin.copy:
    src: '{{ activiti_chain_pem_location }}'
    dest: '{{ activiti_chain_pem }}'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '0600'

- name: Push Activiti context.xml.default
  ansible.builtin.copy:
    src: '{{ context_xml_default }}'
    dest: '{{ tomcat_home }}/conf/Catalina/localhost/context.xml.default'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '0644'

- name: Push server.xml
  ansible.builtin.template:
    src: tomcat_files/server.xml.j2
    dest: '{{ tomcat_home }}/conf/server.xml'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '0460'

- name: Push web.xml
  ansible.builtin.template:
    src: tomcat_files/web.xml.j2
    dest: '{{ tomcat_home }}/conf/web.xml'
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '0460'

- name: Push tomcat-manager-users.xml
  ansible.builtin.template:
    src: tomcat_files/tomcat-manager-users.xml.j2
    dest: /etc/tomcat-manager-users.xml
    owner: '{{ activiti_user }}'
    group: '{{ activiti_group }}'
    mode: '0440'

- name: Configure FirewallD
  ansible.posix.firewalld:
    zone: public
    port: '{{ item }}'
    state: enabled
  loop: '{{ activiti_firewall_ports }}'

- name: Ensuring all handlers have been executed
  ansible.builtin.meta: flush_handlers

- name: Push sudoers file
  ansible.builtin.copy:
    src: etc/sudoers
    dest: /etc/sudoers
    owner: root
    group: root
    mode: '0600'
    validate: visudo -cf %s

- name: Push sshd_config file
  ansible.builtin.copy:
    src: etc/ssh/sshd_config
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: '0600'

- name: Reboot server
  ansible.builtin.reboot:
  tags: reboot
