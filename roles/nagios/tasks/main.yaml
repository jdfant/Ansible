---
#
# The use of LDAP AND local system accounts creates duplicate users
# and groups. This can get confusing.
#
# Here's how to make it all work ..................................
#

# Create local systems accounts if they do not exist.
- name: Register '{{ nagios_id }}' GID
  ansible.builtin.shell: |
    set -o pipefail
    /usr/bin/getent group '{{ nagios_id }}' | awk -F: '{print $3}'
  register: nagios_gid
  failed_when: false
  changed_when: false

- name: Register '{{ nagios_id }}' UID
  ansible.builtin.shell: |
    set -o pipefail
    /usr/bin/getent passwd '{{ nagios_id }}'|awk -F: '{print $3}'
  register: nagios_uid
  failed_when: false
  changed_when: false

- name: Register if '{{ nagios_id }}' local group exists
  ansible.builtin.command: /usr/bin/grep '{{ nagios_id }}' /etc/group
  register: local_nagios_group_exists
  failed_when: false
  changed_when: false

- name: Register if '{{ nagios_id }}' local user exists
  ansible.builtin.command: /usr/bin/grep '{{ nagios_id }}' /etc/passwd
  register: local_nagios_user_exists
  failed_when: false
  changed_when: false

- name: Ensure group '{{ nagios_id }}' exists
  ansible.builtin.command: /usr/sbin/lgroupadd -g '{{ nagios_gid.stdout }}' '{{ nagios_id }}'
  when: local_nagios_group_exists is failed

- name: Ensure user '{{ nagios_id }}' exists
  ansible.builtin.command: /usr/sbin/luseradd -d '{{ nagios_home }}' -s '{{ nagios_shell }}' -u '{{ nagios_uid.stdout }}' '{{ nagios_id }}'
  when: local_nagios_user_exists is failed

###################################################################
#                                                                 #
# Retaining the follwing task blocks for when LDAP is eradicated. #
#                                                                 #
###################################################################
#
# - name: Ensure group '{{ nagios_id }}' exists
#   ansible.builtin.group:
#     name: '{{ nagios_id }}'
#     system: true
#     local: true
#     gid: '{{ nagios_gid }}'
#     state: present

# - name: Ensure user '{{ nagios_id }}' exists
#   ansible.builtin.user:
#     name: '{{ nagios_id }}'
#     home: '{{ nagios_home }}'
#     shell: '{{ nagios_shell }}'
#     system: true
#     local: true
#     uid: '{{ (nagios_uid) | int }}'
#     state: present

- name: Verify correct RPMs are installed
  ansible.builtin.yum:
    name: '{{ item }}'
    state: present
  loop: '{{ nagios_install_rpm_packages }}'

- name: Create/Ensure nagios home dir
  ansible.builtin.file:
    path: '{{ nagios_home }}'
    owner: '{{ nagios_id }}'
    group: '{{ nagios_id }}'
    mode: '0755'
    state: directory

- name: Create/Ensure nagios .ssh dir
  ansible.builtin.file:
    path: '{{ nagios_home }}/.ssh'
    owner: '{{ nagios_id }}'
    group: '{{ nagios_id }}'
    mode: '0700'
    state: directory

- name: Register '{{ nagios_libexec_symlink }}' symlink
  ansible.builtin.command: readlink '{{ nagios_libexec_symlink }}'
  register: libexec_symlink
  failed_when: false
  changed_when: false

- name: Create/Ensure '{{ nagios_authorized_keys }}'
  ansible.builtin.template:
    src: 'usr/local/nagios/.ssh/authorized_keys.j2'
    dest: '{{ nagios_authorized_keys }}'
    owner: '{{ nagios_id }}'
    group: '{{ nagios_id }}'
    mode: '0600'

- name: Unarchive Custom Nagios plugins to '{{ nagios_special_plugins_dir }}'
  ansible.builtin.unarchive:
    src: '{{ nagios_special_plugins_url }}'
    dest: '{{ nagios_home }}'
    owner: '{{ nagios_id }}'
    group: '{{ nagios_id }}'
    mode: '0744'
    validate_certs: false
    remote_src: true
    creates: '{{ nagios_special_plugins_dir }}'

- name: Create/Ensure '{{ nagios_special_plugins_dir }}' dir
  ansible.builtin.file:
    path: '{{ nagios_special_plugins_dir }}'
    owner: '{{ nagios_id }}'
    group: '{{ nagios_id }}'
    mode: '0755'
    state: directory

- name: Symlink nagios '{{ nagios_libexec_symlink }}' to '{{ nagios_plugins_dir }}'
  ansible.builtin.file:
    src: '{{ nagios_plugins_dir }}'
    dest: '{{ nagios_libexec_symlink }}'
    owner: root
    group: root
    state: link
  when: libexec_symlink is failed
