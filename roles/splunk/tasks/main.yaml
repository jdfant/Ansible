---
#
# The use of LDAP AND local system accounts creates duplicate users
# and groups. This can get confusing.
#
# Here's how to make it all work ..................................
#
###################################################################
#                                                                 #
# Retaining the follwing task blocks for when LDAP is eradicated. #
#                                                                 #
###################################################################
#
# - name: Ensure group '{{ splunk_id }}' exists
#   group:
#     name: '{{ splunk_id }}'
#     state: present
#
# - name: Ensure user '{{ splunk_id }}' exists
#   user:
#     name: '{{ splunk_id }}'
#     home: '{{ splunk_home }}'
#     shell: '{{ splunk_shell }}'
#     comment: '{{ splunk_comment }}'
#     state: present

# Create local systems accounts if they do not exist.
- name: Register '{{ splunk_id }}' GID
  shell: |
    set -o pipefail
    /usr/bin/getent group '{{ splunk_id }}'|awk -F: '{print $3}'
  args:
    executable: /bin/bash
  register: splunk_gid
  failed_when: false
  changed_when: false

- name: Register '{{ splunk_id }}' UID
  shell: |
    set -o pipefail
    /usr/bin/getent passwd '{{ splunk_id }}'|awk -F: '{print $3}'
  args:
    executable: /bin/bash
  register: splunk_uid
  failed_when: false
  changed_when: false

- name: Register if '{{ splunk_id }}' local group exists
  command: /usr/bin/grep '{{ splunk_id }}' /etc/group
  register: local_splunk_group_exists
  failed_when: false
  changed_when: false

- name: Register if '{{ splunk_id }}' local user exists
  command: /usr/bin/grep '{{ splunk_id }}' /etc/passwd
  register: local_splunk_user_exists
  failed_when: false
  changed_when: false

- name: Ensure group '{{ splunk_id }}' exists
  command: /usr/sbin/lgroupadd -g '{{ splunk_gid.stdout }}' '{{ splunk_id }}'
  when: local_splunk_group_exists is failed

- name: Ensure user '{{ splunk_id }}' exists
  command: /usr/sbin/luseradd -d '{{ splunk_home }}' -s '{{ splunk_shell }}' -u '{{ splunk_uid.stdout }}' '{{ splunk_id }}'
  when: local_splunk_user_exists is failed

- name: Register splunk installed
  command: /usr/bin/grep '{{ splunk_version }}' '{{ splunk_home }}/README-splunk.txt'
  register: splunk_installed
  failed_when: false
  changed_when: false

- name: Verify correct RPMs are installed
  yum:
    name: '{{ item }}'
    state: present
    validate_certs: false
  loop: '{{ splunk_install_rpm_packages }}'
  when: splunk_installed is failed

- name: Push and enable splunkforwarder.service unit
  template:
    src: splunk_configs/splunkforwarder.service.j2
    dest: /etc/systemd/system/splunkforwarder.service
    owner: root
    group: root
    mode: '0644'

- name: Create/Ensure splunk log dir
  file:
    path: '{{ splunk_logs }}'
    owner: root
    group: root
    mode: '0755'
    state: directory

- name: Push log-local.cfg
  template:
    src: splunk_configs/log-local.cfg.j2
    dest: '{{ splunk_home }}/etc/log-local.cfg'
    owner: 'splunk'
    group: 'splunk'
    mode: '0755'

- name: Push deploymentclient.conf
  template:
    src: splunk_configs/deploymentclient.conf
    dest: '{{ splunk_home }}/etc/system/local/deploymentclient.conf'
    owner: splunk
    group: splunk
    mode: '0755'

- name: Push log-local.cfg
  template:
    src: splunk_configs/props.conf
    dest: '{{ splunk_home }}/etc/system/local/props.conf'
    owner: 'splunk'
    group: 'splunk'
    mode: '0755'

- name: Create/Ensure splunk home dir
  file:
    path: '{{ splunk_home }}'
    owner: splunk
    group: splunk
    mode: '0755'
    state: directory
    recurse: true

- name: Delete outputs.conf
  file:
    path: '{{ splunk_home }}/etc/system/local/outputs.conf'
    state: absent

- name: Delete inputs.conf
  file:
    path: '{{ splunk_home }}/etc/system/local/inputs.conf'
    state: absent

- name: Register splunk ftr
  command: /bin/ls '{{ splunk_home }}/ftr'
  register: splunk_ftr
  failed_when: false
  changed_when: false

# Bypassing handlers on this one.
- name: Performing splunk 'first time start'
  shell: |
    set -o pipefail
    /opt/splunkforwarder/bin/splunk start --accept-license --answer-true --no-prompt
    /bin/kill $(/sbin/pidof splunkd)
  args:
    executable: /bin/bash
  when: splunk_ftr is succeeded
  failed_when: false

- name: Push and enable splunkforwarder.service unit
  template:
    src: splunk_configs/splunkforwarder.service.j2
    dest: /etc/systemd/system/splunkforwarder.service
    owner: root
    group: root
    mode: '0644'

# Bypassing handlers on this one.
- name: Enable splunk
  systemd:
    daemon_reload: true
    name: splunkforwarder.service
    enabled: true
    state: started

# SO ..... after splunk first starts, it creates a var directory that
# is owned by root with different perms than the splunk home directory. :/
- name: Set permissions on '{{ splunk_home }}/var'
  file:
    path: '{{ splunk_home }}/var'
    owner: root
    group: root
    mode: '0710'
    state: directory
    recurse: true
